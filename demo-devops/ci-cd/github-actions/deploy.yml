name: Deploy to Development

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: demo-devops-dev
  K8S_NAMESPACE: app-dev

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Checkov security scan
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: terraform/
        framework: terraform
        quiet: true

  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and test
      run: |
        docker build -t nginx-app:test -f Dockerfile .
        docker run --rm nginx-app:test nginx -t

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: test
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    - name: Terraform Init
      run: terraform init terraform/environments/dev/

    - name: Terraform Plan
      run: terraform plan -var-file=dev.tfvars terraform/environments/dev/

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file=dev.tfvars terraform/environments/dev/

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.EKS_CLUSTER_NAME }}

  setup-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Setup monitoring namespace
      run: kubectl apply -f kubernetes/monitoring/namespace.yaml

    - name: Install Prometheus
      run: |
        kubectl apply -f kubernetes/monitoring/prometheus.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus-server -n monitoring

    - name: Install Grafana
      run: |
        kubectl apply -f kubernetes/monitoring/grafana.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/grafana -n monitoring

    - name: Install AWS Secrets Manager CSI driver
      run: kubectl apply -k github.com/aws/secrets-store-csi-driver-provider-aws/deployments/eks/offline/

  deploy-application:
    runs-on: ubuntu-latest
    needs: setup-monitoring
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy application
      run: kubectl apply -k kubernetes/base/
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/nginx-app -n ${{ env.K8S_NAMESPACE }}
        kubectl get pods -n ${{ env.K8S_NAMESPACE }}

    - name: Run monitoring tests
      run: ./scripts/monitoring-test.sh